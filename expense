#! /usr/bin/env ruby
require 'pg'
require 'pry'
require 'io/console'

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    argument = arguments[0]
    if argument == 'list'
      @application.list_expenses
    elsif argument == 'add'
      amount = arguments[1]
      memo = arguments[2]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expenses(amount, memo)
    elsif argument == 'search'
      search_term = arguments[1]
      @application.search(search_term)
    elsif argument == 'delete'
      id = arguments[1]
      @application.delete_expense(id)
    elsif argument == 'clear'
      puts 'This will remove all expenses. Are you sure? (y/n)'
      answer = $stdin.getch
      return if answer.downcase != 'y'
      @application.delete_all_expenses
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
    An expense recording system

    Commands:
    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    HELP
  end
end

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id = $1;"
    result = @connection.exec_params(sql, [id])
    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1"
      @connection.exec_params(sql, [id])
      puts "The following expense has been deleted:\n"
      display_expenses(result)
    else
      puts "There is no expense with the id '#{id}'."
    end
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses;")
    puts "All expenses have been deleted."
  end

  def search(search_term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    result = @connection.exec_params(sql, ["%#{search_term}%"])
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    display_count(result)
    display_expenses(result) if result.ntuples > 0
  end

  def add_expenses(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end

  private

  def display_count(result)
    count = result.ntuples
    if count == 0
      puts "There are no expenses."
    else
      puts "There are #{count} expense#{'s' if count != 1}."
    end
  end

  def display_expenses(result)
    sum = 0
    result.each do |tuple|
      columns = [ tuple['id'].rjust(3),
      tuple['created_on'].rjust(10),
      tuple['amount'].rjust(12),
      tuple['memo'] ]
      puts columns.join(' | ')
      sum += tuple['amount'].to_f
    end
    puts "-" * 50
    puts "Total #{sum.to_s.rjust(25)}"
  end


  def setup_schema
    result = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL

    if result[0]['count'] == '0'
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6, 2) NOT NULL CHECK (amount >= 0.01),
          memo text NOT NULL,
          created_on date NOT NULL
        );
      SQL
    end
  end
end

CLI.new.run(ARGV)
