#! /usr/bin/env ruby
require 'pg'
#puts "Hello World"

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(arguments)
    argument = arguments[0]
    if argument == 'list'
      @application.list_expenses
    elsif argument == 'add'
      amount = arguments[1]
      memo = arguments[2]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expenses(amount, memo)
    elsif argument == 'search'
      search_term = arguments[1]
      @application.search(search_term)
    elsif argument == 'delete'
      id = arguments[1]
      @application.delete(id)
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
    An expense recording system

    Commands:
    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    HELP
  end
end

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: 'expenses')
  end

  def delete_list(id)
        
  end

  def search(search_term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    result = @connection.exec_params(sql, ["%#{search_term}%"])
    display_expenses(result)
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    display_expenses(result)
  end

  def add_expenses(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3)"
    @connection.exec_params(sql, [amount, memo, date])
  end

  private

  def display_expenses(result)
    result.each do |tuple|
      columns = [ tuple['id'].rjust(3),
      tuple['created_on'].rjust(10),
      tuple['amount'].rjust(12),
      tuple['memo'] ]
      puts columns.join(' | ')
    end
  end
end

CLI.new.run(ARGV)
